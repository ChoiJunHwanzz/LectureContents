public class TrickTest {
    public static void main(String[] args) {
        int num1 = 3, num2 = 4;

        // AND 연산과 OR 연산의 특성 때문에 발생한 논리적 오류!
        // AND는 하나라도 거짓이면 거짓(false)
        // 어 ? 이미 앞의 케이스가 거짓인데 뒤의 내용을 확인할 필요가 있을까 ?
        // 그래서 뒤의 ++ 코드를 실행하지 않음
        if ((num1 % 3 == 1) && (num2++ % 5 == 0)) {
            System.out.println("이 조건은 실행되지 않습니다.");
        }

        // OR 는 하나라도 참이면 참(true)
        // 어 ? 이미 맨 앞의 케이스가 참인데 뒤에거 볼 필요가 있어 ? 어차피 참인데 ???
        // 그래서 뒤의 ++ 코드를 실행하지 않음
        if ((num1 % 3 == 0) || (num2++ % 6 == 0)) {
            System.out.println("이 조건은 실행됩니다.");
        }

        System.out.printf("num1 = %d, num2 = %d\n", num1, num2);

        // println , printf , print 의 차이점이 궁금합니다
        // print(): 단순히 출력만함(앤터[개행] 적용안함)
        // println(): 출력 + 앤터[개행] 적용
        // printf(): 특정한 형식을 지정해서 출력함(%d, %f 등등)
    }
}

// Q: 위와 같은 케이스를 어디에서 많이 사용할 수 있을까요 ?
// A:
// 전체 데이터가 1000개 있다고 가정합니다.
// 케이스 A에 해당하는 데이터는 150개 있습니다.
// 케이스 B에 해당하는 데이터는 600개 있습니다.
// 우리가 찾아야 하는 것은 케이스 A와 케이스 B를 동시에 만족해야함
// 아무것도 아닌 케이스는 250개
// 이런 상황에서 가장 효율적인 코드를 작성한다면 어떻게 작성해야할까요 ?

// if (case A && case B): 1번
// 1000번 검사중 case A를 만족하는 것은 150개가 나옴
// 그러므로 뒤의 case B에 대한 검사를 150번 추가로 함

// if (case B && case A): 2번
// 1000번 검사중 case B를 만족하는 것은 600개가 나옴
// 그러므로 뒤의 case A에 대한 검사 또한 600번 해야함

// 결론: 관계 연산자 AND 는 if 연산에서 사용할 때
//      전체에서 적용되는 횟수가 가장 적은 녀석이 맨 앞에 배치될 때 가장 큰 효율을 얻을 수 있다.

// 운동 캠퍼스에 1000명의 학생이 있다.
// 농구 선수가 되고 싶어하는 학생이 150명 있다.
// 축구 선수가 되고 싶어하는 학생이 300명 있다.
// 농구 선수도 되고 싶고 축구 선수도 되고 싶어하는 학생을 판별해보자!

// if (장래희망 농구선수 && 장래희망 축구선수) -> 850 + 150 + 150
//          150명 ---> 150명분에 대한 검사
// if (장래희망 축구선수 && 장래희망 농구선수) -> 700 + 300 + 300
//          300명 ---> 실제 농구선수에 해당하는 학생은 150명임에도 300번이나 쓸대없이 검사해야함
