public class ArrayTest {
    public static void main(String[] args) {
        //배열을 써야하는 이유?
        //하나 하나 변수로 선언하고 수정하기 힘들기 때문에
        // 관리하기 쉽게 배열을 사용한다
        // int dice[] = {0, 0, 0, 0, 0, 0}
        int arr[] = { 1, 2, 3, 4, 5 };

        //배열을 만드는 방법
        // 1. stack에 할당하는 방법(지역 변수)
        //    1-1. 일단은 배열의 데이터 타입(int 같은)을 적는다.
        //    1-2. 배열의 이름이 될 변수명을 적는다.
        //    1-3. 배열임을 알리기 위해 []을 변수 옆에 적어준다.
        //    1-4. 필요하다면 배열의 값들을 초기화한다.
        //         (이때 원소로 지정한 숫자에 따라 배열의 길이가 지정된다)

        // int arr[] = { 1, 2, 3, 4, 5 };
        // 위 데이터는 아래와 같은 형식으로 저장된다.

        //     ---------------------
        // arr | 1 | 2 | 3 | 4 | 5 |
        //     ---------------------
        //      [0] [1] [2] [3] [4]   =0이 1
        // 배열의 인덱스(방) 번호는 0번부터 시작함에 주의하도록 한다.
        // 그러나 방 번호가 순차적으로 증가하기 때문에
        // for 문이나 while 문등의 반복문과의 혼합구성에 있어 매우 탁월하다.

        for (int i =0; i < 5; i++) {
            System.out.printf("arr[%d] = %d\n", i, arr[i]);
        }
    }
}
// stack(지역변수)에 할당한다는 것은 지역변수로 처리함을 의미
// 그렇기 때문에 나중에 매서드나 클래스를 학습한 이후 스택에 할당하면
// 해당 매서드 혹은 클래스 내부에서만 해당 배열이 활성화됩니다.

// arr[0] = x, arr[1] = y, arr[2] = z, arr[3] = k
// System.out.println("arr[" + 0 + "] = " + x + ", arr[" + 1 + "] = " + y + ", arr[ ........ 지옥");
// System.out.printf("arr[%d] = %d, arr[%d] = %d, arr[%d] = %d, arr[%d] = %d\n",
//                    0, arr[0], 1, arr[1], 2, arr[2], 3, arr[3])