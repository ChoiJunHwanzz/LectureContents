public class InterruptComment {
    public static void main(String[] args) throws InterruptedException {
        for(int i = 0;; i++){
            if(i % 2 == 0){
                System.out.println("짝수");
            }else {
                System.out.println("홀수");
            }

            Thread.sleep(500);
        }
    }
}

// Interrupt: 인터럽트란 무엇인가?
// 사실 인터럽터라는 용어는 하드웨어 개발자들이 주로 사용하는 단어다.
// 보통 자바나 GUI 개발자들 혹은 애플리케이션 개발자들은 이벤트라고 표현한다.
// 격국 이벤트와 인터럽트는 동의어란 뜻이다.
// 그렇다면 인터럽트라고 부르지말고 이벤트라고 불러보자
// 이벤트는 뭘까>?

// 연인끼리 100 일 이벤트를 챙긴다고 해보자
// 100일은 사실 어쩌면 존재할 수도 있고 어쩌먼 존재하지 않을수도 있다.

// 몰컴을 예로 들기
// 전제조건 : 부모님이 안방에서 주무시고 계시고
//          나는 자는척하다 일어나서 컴퓨터를 켠 후 게임 시작
// 1. 몰래 컴터를 하고있었고 게임중이였음
// 2. 갑자기 안방의 문이 열렸음. <<< --- 이벤트(인터럽트)
// 빨리 자는척 해야함
// ---> 문을 열어 보시고 걸리면 끝
// ---> 이게 아니라면 문을 열어 보시고 잘못 들었나 ? 하고 화장실 갔다가 다시 주무시러 방에감
// ---> 부모님이 방에 다시 들어가시면 컴퓨터를 키고 다시 게임을 복귀
// 3. 이후부터 다시 우리시간

// 기본적으로 이벤트라는 것은 최우선적으로 처리해야 하는 작업으로 *
// 어떤 작업보다 우선순위가 높은 녀석들입니다. *
// 마찬가지로 여기서 Thread.sleep()하는 작업도 일종의 이벤트(인터럽트)에 해당.
// 그러므로 이 작업이 시작되면 다른 모든 작업을 제쳐두고 이것을 최우선적으로 처리
// 물론 조금 더 정확한 것은 CPU의 동작관 Thread의 동작 과정에 대해 설명할 때 자세히 기술하도록함

// 결국 Thread.sleep(500)이 가장 중요한 작업이므로
// 이 작업을 완료하기 전까지는 어떠한 작업도 수행하지 않는다는 뜻
// 그래서 0.5초동안은 무조건적인 대기!