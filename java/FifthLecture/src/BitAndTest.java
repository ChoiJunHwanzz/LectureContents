public class BitAndTest {
    public static void main(String[] args) {
        int num1 = 10, num2 = 8;

        // & 이 비트연산자 AND
        // 관계 연산자에서는 && 형태로 존재하였음
        // 10 ===> 1010
        //  8 ===> 1000 AND
        // -----------------
        //  8 ===> 1000
        System.out.printf("%d AND %d = %d\n", num1, num2, num1 & num2);

        num2 = 138;

        // 138 ===> 10001010
        //  10 ===>     1010 AND
        // ----------------------
        //  10 ===> 00001010
        System.out.printf("%d AND %d = %d\n", num1, num2, num1 & num2);
    }
}

// 프로그래밍 상에서, 비트연산자 AND라는 개념은
// 이진수로 변환하였을 때 두 숫자가 이진수에서 "1"이 존재하는 2^n이 있는 부분만 살려서 표기를 하는? 그런 개념으로 이해를 하자
// 십진수 10은 이진수 에서는 1010
// 십진수 8은 이진수에서 1000이니깐 둘다 1이 써있는 2^n이 있는 부분은 2^3 부분이다
// 즉 십진수 10과 8을 비트 연산자 AND로 연산?을 해버리면?
// 이진수 1000이니깐 8 이라는 거다.